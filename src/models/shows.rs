//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use super::sea_orm_active_enums::TranslationType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "shows")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub show_id: String,
    pub translation_type: TranslationType,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub image_url: String,
    pub last_updated: Option<DateTimeUtc>,
    pub episodes: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::episodes::Entity")]
    Episodes,
    #[sea_orm(has_one = "super::users_shows::Entity")]
    UsersShows,
}

impl Related<super::episodes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Episodes.def()
    }
}

impl Related<super::users_shows::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersShows.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
