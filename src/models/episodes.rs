//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "episodes")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub number: i32,
    pub season: i32,
    pub show_id: i32,
    #[sea_orm(column_type = "Text")]
    pub url: String,
    pub last_updated: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::shows::Entity",
        from = "Column::ShowId",
        to = "super::shows::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Shows,
}

impl Related<super::shows::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Shows.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
